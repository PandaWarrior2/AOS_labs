Отчет по лабораторной работе 2. Никитин Святослав, М19-512

1. Сделано.

2. Сделано. Сначала выполняется родительский процесс, затем дочерний.

3. Сделано

4. Сделано

5. Сделано. Дочерний процесс станет зомби. Зомби процесс априори мертвый и является лишь записью в таблице процессов.
   Данный механизм необходим для того, чтобы родительский процесс мог получить exit-status завершенного дочернего процесса. Пока родитель не получит этот exit-status, процесс будет висеть в списке
   в виде зомби-процесса. А это делается с помощью механизма wait(). В данном номере мы не используем этот механизм, поэтому ответ - убить родительский процесс.
   После того, как умирает родительский процесс, зомби-процесс будет наследоваться от pid=1, который очистит его запись в таблице процессов.

6. Сделано. Родительский процесс будет убит, а дочерний процесс продолжит сущшествование с ppid = 1 (init).
   После нажатия ctrl+c оба процесса были убиты.
   Если родительский процесс завершится, то дочерний не получится убимть с помощью ctrl+c, так как на этот процесс не придет сигнал ctrl+c: так как мы его будем слать не группе процессов программы ./lab. После того, как умер родительский процесс, группа процессов у дочернего стала другая

7. Нет, на порожденный процесс ctrl+c не действует. CTRL+C формирует сигнал SIGINT, который посылается всем процессам текущей группы.
   В дочернем процессе мы намеренно поменяли pgrp, поэтому на этот процесс SIGINT уже не пойдействовал.

8.  Сделано. Мы открыли файл, а затем сделали форк: дескриптор файла стал общим для обоих процессов.
    Так как сначала выполняется родительский процесс (см. п.2), то файл был прочитан и записан в выходной файл, созданный родительским процессом.
    Выходной файл, созданный дочерним процессом был создан и оставлен пустым, так как при выполнении дочернего процесса файловый дескриптор уже был в конце.
    Если выводить на экран читаемую из файлов информацию, то файл будет выведен единожды родительским процессом, после чего дочернему процессу
    снова достанется дескриптор файла,находящийся в конце.

9. В этом случае содержимое входного файла записывается в оба выходных файла, так как файловый дескриптор для каждого процесса свой.
   В случае вывода на экран оба файла будут выведены в полном объеме.

10. Сделано

11. Сделано
